name: Destroy Terraform SCP
on:
  workflow_dispatch:  # Esto permite ejecutar el workflow manualmente desde GitHub Actions UI
    inputs:
      confirmation:
        description: 'Confirmar destrucción de la SCP'
        required: true
        default: 'yes'

jobs:
  terraform:
    name: Destroy Terraform Job
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Checkout el código
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Configurar las credenciales para el backend (la cuenta donde está el estado de Terraform)
      - name: Configure AWS credentials for backend
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_BACKEND }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_BACKEND }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_BACKEND }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Paso 3: Inicializar Terraform (con las credenciales del backend)
      - name: Initialize Terraform
        run: terraform init
        working-directory: ./Organizations\ \(SCP\)  # Se ajusta el directorio con espacios en el nombre

      # Paso 4: Configurar las credenciales para la cuenta de despliegue
      - name: Configure AWS credentials for deployment
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN_DEPLOY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Paso 5: Ejecutar terraform destroy (con las credenciales de despliegue)
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./Organizations\ \(SCP\)  # Se ajusta el directorio con espacios en el nombre